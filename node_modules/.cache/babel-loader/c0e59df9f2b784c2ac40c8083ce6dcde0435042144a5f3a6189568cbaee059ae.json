{"ast":null,"code":"import { saveToLocalStorage, getFromLocalStorage, clearLocalStorage } from '../../utils/storage';\nconst mockUsers = [{\n  id: 1,\n  username: 'demo',\n  password: 'password123',\n  email: 'demo@example.com',\n  token: 'mock-auth-token-12345'\n}];\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: 'LOGIN_REQUEST'\n  });\n  try {\n    const user = mockUsers.find(u => u.username === username.trim() && u.password === password);\n    if (!user) throw new Error('Invalid credentials');\n    const {\n      password: _,\n      ...userData\n    } = user;\n    saveToLocalStorage('user', userData);\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: {\n        user: userData\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const logout = () => dispatch => {\n  clearLocalStorage();\n  dispatch({\n    type: 'LOGOUT_SUCCESS'\n  });\n};\nexport const checkAuth = () => dispatch => {\n  const user = getFromLocalStorage('user');\n  if (user) {\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: {\n        user\n      }\n    });\n  }\n};","map":{"version":3,"names":["saveToLocalStorage","getFromLocalStorage","clearLocalStorage","mockUsers","id","username","password","email","token","login","dispatch","type","user","find","u","trim","Error","_","userData","payload","error","message","logout","checkAuth"],"sources":["D:/React project/usermanagement/src/store/actions/authActions.jsx"],"sourcesContent":["import { saveToLocalStorage, getFromLocalStorage, clearLocalStorage } from '../../utils/storage';\r\n\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    username: 'demo',\r\n    password: 'password123',\r\n    email: 'demo@example.com',\r\n    token: 'mock-auth-token-12345'\r\n  }\r\n];\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n  dispatch({ type: 'LOGIN_REQUEST' });\r\n  \r\n  try {\r\n    const user = mockUsers.find(u => \r\n      u.username === username.trim() && \r\n      u.password === password\r\n    );\r\n\r\n    if (!user) throw new Error('Invalid credentials');\r\n\r\n    const { password: _, ...userData } = user;\r\n    saveToLocalStorage('user', userData);\r\n    \r\n    dispatch({ type: 'LOGIN_SUCCESS', payload: { user: userData } });\r\n  } catch (error) {\r\n    dispatch({ type: 'LOGIN_FAILURE', payload: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  clearLocalStorage();\r\n  dispatch({ type: 'LOGOUT_SUCCESS' });\r\n};\r\n\r\nexport const checkAuth = () => (dispatch) => {\r\n  const user = getFromLocalStorage('user');\r\n  if (user) {\r\n    dispatch({ type: 'LOGIN_SUCCESS', payload: { user } });\r\n  }\r\n};"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,mBAAmB,EAAEC,iBAAiB,QAAQ,qBAAqB;AAEhG,MAAMC,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,MAAM;EAChBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE,kBAAkB;EACzBC,KAAK,EAAE;AACT,CAAC,CACF;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACJ,QAAQ,EAAEC,QAAQ,KAAK,MAAOI,QAAQ,IAAK;EAC/DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,IAAI;IACF,MAAMC,IAAI,GAAGT,SAAS,CAACU,IAAI,CAACC,CAAC,IAC3BA,CAAC,CAACT,QAAQ,KAAKA,QAAQ,CAACU,IAAI,CAAC,CAAC,IAC9BD,CAAC,CAACR,QAAQ,KAAKA,QACjB,CAAC;IAED,IAAI,CAACM,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;IAEjD,MAAM;MAAEV,QAAQ,EAAEW,CAAC;MAAE,GAAGC;IAAS,CAAC,GAAGN,IAAI;IACzCZ,kBAAkB,CAAC,MAAM,EAAEkB,QAAQ,CAAC;IAEpCR,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEQ,OAAO,EAAE;QAAEP,IAAI,EAAEM;MAAS;IAAE,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdV,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEQ,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;IAC3D,MAAMD,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,MAAM,GAAGA,CAAA,KAAOZ,QAAQ,IAAK;EACxCR,iBAAiB,CAAC,CAAC;EACnBQ,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAiB,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMY,SAAS,GAAGA,CAAA,KAAOb,QAAQ,IAAK;EAC3C,MAAME,IAAI,GAAGX,mBAAmB,CAAC,MAAM,CAAC;EACxC,IAAIW,IAAI,EAAE;IACRF,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEQ,OAAO,EAAE;QAAEP;MAAK;IAAE,CAAC,CAAC;EACxD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}