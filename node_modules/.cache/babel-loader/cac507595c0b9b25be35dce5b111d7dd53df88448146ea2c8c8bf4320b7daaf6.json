{"ast":null,"code":"// src/store/actions/authActions.js\nexport const login = credentials => async dispatch => {\n  dispatch({\n    type: 'LOGIN_REQUEST'\n  });\n  try {\n    // Mock API call - in real app, this would be an actual API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Hardcoded credentials for demo\n    if (credentials.username === 'demo' && credentials.password === 'password123') {\n      const user = {\n        username: 'demo',\n        email: 'demo@example.com',\n        token: 'mock-auth-token'\n      };\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: user\n      });\n      return {\n        success: true\n      };\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  } catch (error) {\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: 'LOGOUT_SUCCESS'\n  });\n};","map":{"version":3,"names":["login","credentials","dispatch","type","Promise","resolve","setTimeout","username","password","user","email","token","payload","success","Error","error","message","logout"],"sources":["D:/React project/usermanagement/src/store/actions/authActions.jsx"],"sourcesContent":["// src/store/actions/authActions.js\r\nexport const login = (credentials) => async (dispatch) => {\r\n    dispatch({ type: 'LOGIN_REQUEST' });\r\n    \r\n    try {\r\n      // Mock API call - in real app, this would be an actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Hardcoded credentials for demo\r\n      if (credentials.username === 'demo' && credentials.password === 'password123') {\r\n        const user = {\r\n          username: 'demo',\r\n          email: 'demo@example.com',\r\n          token: 'mock-auth-token'\r\n        };\r\n        \r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: user\r\n        });\r\n        \r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'LOGIN_FAILURE',\r\n        payload: error.message\r\n      });\r\n      \r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n  \r\n  export const logout = () => (dispatch) => {\r\n    dispatch({ type: 'LOGOUT_SUCCESS' });\r\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAIC,WAAW,IAAK,MAAOC,QAAQ,IAAK;EACtDA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,IAAI;IACF;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;IAEtD;IACA,IAAIJ,WAAW,CAACM,QAAQ,KAAK,MAAM,IAAIN,WAAW,CAACO,QAAQ,KAAK,aAAa,EAAE;MAC7E,MAAMC,IAAI,GAAG;QACXF,QAAQ,EAAE,MAAM;QAChBG,KAAK,EAAE,kBAAkB;QACzBC,KAAK,EAAE;MACT,CAAC;MAEDT,QAAQ,CAAC;QACPC,IAAI,EAAE,eAAe;QACrBS,OAAO,EAAEH;MACX,CAAC,CAAC;MAEF,OAAO;QAAEI,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdb,QAAQ,CAAC;MACPC,IAAI,EAAE,eAAe;MACrBS,OAAO,EAAEG,KAAK,CAACC;IACjB,CAAC,CAAC;IAEF,OAAO;MAAEH,OAAO,EAAE,KAAK;MAAEE,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EACjD;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAOf,QAAQ,IAAK;EACxCA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAiB,CAAC,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}