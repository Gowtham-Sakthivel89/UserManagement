{"ast":null,"code":"import { saveToLocalStorage } from '../../utils/storage';\nexport const fetchProfile = userId => async (dispatch, getState) => {\n  dispatch({\n    type: 'FETCH_PROFILE_REQUEST'\n  });\n  try {\n    const {\n      auth\n    } = getState();\n    if (auth.user && auth.user.id === userId) {\n      dispatch({\n        type: 'FETCH_PROFILE_SUCCESS',\n        payload: {\n          profileData: auth.user\n        }\n      });\n    } else {\n      throw new Error('User not found');\n    }\n  } catch (error) {\n    dispatch({\n      type: 'PROFILE_ERROR',\n      payload: {\n        error: error.message\n      }\n    });\n  }\n};\nexport const updateProfile = profileData => async (dispatch, getState) => {\n  dispatch({\n    type: 'FETCH_PROFILE_REQUEST'\n  });\n  try {\n    const {\n      auth\n    } = getState();\n    if (auth.user) {\n      const updatedUser = {\n        ...auth.user,\n        ...profileData\n      };\n      saveToLocalStorage('user', updatedUser);\n      dispatch({\n        type: 'UPDATE_PROFILE_SUCCESS',\n        payload: {\n          profileData: updatedUser\n        }\n      });\n    } else {\n      throw new Error('Not authenticated');\n    }\n  } catch (error) {\n    dispatch({\n      type: 'PROFILE_ERROR',\n      payload: {\n        error: error.message\n      }\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["saveToLocalStorage","fetchProfile","userId","dispatch","getState","type","auth","user","id","payload","profileData","Error","error","message","updateProfile","updatedUser"],"sources":["D:/React project/usermanagement/src/store/actions/profileActions.jsx"],"sourcesContent":["import { saveToLocalStorage } from '../../utils/storage';\r\n\r\nexport const fetchProfile = (userId) => async (dispatch, getState) => {\r\n  dispatch({ type: 'FETCH_PROFILE_REQUEST' });\r\n  \r\n  try {\r\n    const { auth } = getState();\r\n    if (auth.user && auth.user.id === userId) {\r\n      dispatch({\r\n        type: 'FETCH_PROFILE_SUCCESS',\r\n        payload: { profileData: auth.user }\r\n      });\r\n    } else {\r\n      throw new Error('User not found');\r\n    }\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'PROFILE_ERROR',\r\n      payload: { error: error.message }\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateProfile = (profileData) => async (dispatch, getState) => {\r\n  dispatch({ type: 'FETCH_PROFILE_REQUEST' });\r\n  \r\n  try {\r\n    const { auth } = getState();\r\n    if (auth.user) {\r\n      const updatedUser = { ...auth.user, ...profileData };\r\n      \r\n      saveToLocalStorage('user', updatedUser);\r\n      \r\n      dispatch({\r\n        type: 'UPDATE_PROFILE_SUCCESS',\r\n        payload: { profileData: updatedUser }\r\n      });\r\n    } else {\r\n      throw new Error('Not authenticated');\r\n    }\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'PROFILE_ERROR',\r\n      payload: { error: error.message }\r\n    });\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,qBAAqB;AAExD,OAAO,MAAMC,YAAY,GAAIC,MAAM,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACpED,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAwB,CAAC,CAAC;EAE3C,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAGF,QAAQ,CAAC,CAAC;IAC3B,IAAIE,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,CAACC,EAAE,KAAKN,MAAM,EAAE;MACxCC,QAAQ,CAAC;QACPE,IAAI,EAAE,uBAAuB;QAC7BI,OAAO,EAAE;UAAEC,WAAW,EAAEJ,IAAI,CAACC;QAAK;MACpC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAM,IAAII,KAAK,CAAC,gBAAgB,CAAC;IACnC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPE,IAAI,EAAE,eAAe;MACrBI,OAAO,EAAE;QAAEG,KAAK,EAAEA,KAAK,CAACC;MAAQ;IAClC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIJ,WAAW,IAAK,OAAOP,QAAQ,EAAEC,QAAQ,KAAK;EAC1ED,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAwB,CAAC,CAAC;EAE3C,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAGF,QAAQ,CAAC,CAAC;IAC3B,IAAIE,IAAI,CAACC,IAAI,EAAE;MACb,MAAMQ,WAAW,GAAG;QAAE,GAAGT,IAAI,CAACC,IAAI;QAAE,GAAGG;MAAY,CAAC;MAEpDV,kBAAkB,CAAC,MAAM,EAAEe,WAAW,CAAC;MAEvCZ,QAAQ,CAAC;QACPE,IAAI,EAAE,wBAAwB;QAC9BI,OAAO,EAAE;UAAEC,WAAW,EAAEK;QAAY;MACtC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;IACtC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPE,IAAI,EAAE,eAAe;MACrBI,OAAO,EAAE;QAAEG,KAAK,EAAEA,KAAK,CAACC;MAAQ;IAClC,CAAC,CAAC;IACF,MAAMD,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}