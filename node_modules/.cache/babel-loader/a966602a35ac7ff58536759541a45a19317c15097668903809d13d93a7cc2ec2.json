{"ast":null,"code":"import { saveToLocalStorage, getFromLocalStorage, clearLocalStorage } from '../../utils/storage';\nconst mockUsers = [{\n  id: 1,\n  username: 'demo',\n  password: 'password123',\n  email: 'demo@example.com',\n  token: 'mock-auth-token-12345'\n}, {\n  id: 2,\n  username: 'admin',\n  password: 'admin123',\n  email: 'admin@example.com',\n  token: 'mock-auth-token-54321'\n}];\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: 'LOGIN_REQUEST'\n  });\n  try {\n    console.log('Login attempt with:', {\n      username,\n      password\n    });\n    const user = mockUsers.find(u => u.username === username.trim() && u.password === password);\n    if (!user) {\n      throw new Error('Invalid username or password');\n    }\n    const {\n      password: _,\n      ...userData\n    } = user;\n    saveToLocalStorage('user', userData);\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: {\n        user: userData\n      }\n    });\n    return userData;\n  } catch (error) {\n    console.error('Login error:', error);\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const logout = () => dispatch => {\n  clearLocalStorage();\n  dispatch({\n    type: 'LOGOUT_SUCCESS'\n  });\n};\nexport const checkAuth = () => dispatch => {\n  const user = getFromLocalStorage('user'); // Now properly imported\n  if (user) {\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: {\n        user\n      }\n    });\n  }\n};","map":{"version":3,"names":["saveToLocalStorage","getFromLocalStorage","clearLocalStorage","mockUsers","id","username","password","email","token","login","dispatch","type","console","log","user","find","u","trim","Error","_","userData","payload","error","message","logout","checkAuth"],"sources":["D:/React project/usermanagement/src/store/actions/authActions.jsx"],"sourcesContent":["\r\nimport { \r\n  saveToLocalStorage,\r\n  getFromLocalStorage,  \r\n  clearLocalStorage\r\n} from '../../utils/storage';\r\n\r\n\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    username: 'demo',\r\n    password: 'password123',\r\n    email: 'demo@example.com',\r\n    token: 'mock-auth-token-12345'\r\n  },\r\n  {\r\n    id: 2,\r\n    username: 'admin',\r\n    password: 'admin123',\r\n    email: 'admin@example.com',\r\n    token: 'mock-auth-token-54321'\r\n  }\r\n];\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n  dispatch({ type: 'LOGIN_REQUEST' });\r\n  \r\n  try {\r\n    console.log('Login attempt with:', { username, password });\r\n\r\n    const user = mockUsers.find(u => \r\n      u.username === username.trim() && \r\n      u.password === password\r\n    );\r\n\r\n    if (!user) {\r\n      throw new Error('Invalid username or password');\r\n    }\r\n\r\n    const { password: _, ...userData } = user;\r\n    saveToLocalStorage('user', userData);\r\n    \r\n    dispatch({\r\n      type: 'LOGIN_SUCCESS',\r\n      payload: { user: userData }\r\n    });\r\n    \r\n    return userData;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    dispatch({\r\n      type: 'LOGIN_FAILURE',\r\n      payload: error.message\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  clearLocalStorage();\r\n  dispatch({ type: 'LOGOUT_SUCCESS' });\r\n};\r\n\r\nexport const checkAuth = () => (dispatch) => {\r\n  const user = getFromLocalStorage('user');  // Now properly imported\r\n  if (user) {\r\n    dispatch({\r\n      type: 'LOGIN_SUCCESS',\r\n      payload: { user }\r\n    });\r\n  }\r\n};"],"mappings":"AACA,SACEA,kBAAkB,EAClBC,mBAAmB,EACnBC,iBAAiB,QACZ,qBAAqB;AAG5B,MAAMC,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,MAAM;EAChBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE,kBAAkB;EACzBC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,OAAO;EACjBC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,mBAAmB;EAC1BC,KAAK,EAAE;AACT,CAAC,CACF;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACJ,QAAQ,EAAEC,QAAQ,KAAK,MAAOI,QAAQ,IAAK;EAC/DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;MAAER,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAE1D,MAAMQ,IAAI,GAAGX,SAAS,CAACY,IAAI,CAACC,CAAC,IAC3BA,CAAC,CAACX,QAAQ,KAAKA,QAAQ,CAACY,IAAI,CAAC,CAAC,IAC9BD,CAAC,CAACV,QAAQ,KAAKA,QACjB,CAAC;IAED,IAAI,CAACQ,IAAI,EAAE;MACT,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,MAAM;MAAEZ,QAAQ,EAAEa,CAAC;MAAE,GAAGC;IAAS,CAAC,GAAGN,IAAI;IACzCd,kBAAkB,CAAC,MAAM,EAAEoB,QAAQ,CAAC;IAEpCV,QAAQ,CAAC;MACPC,IAAI,EAAE,eAAe;MACrBU,OAAO,EAAE;QAAEP,IAAI,EAAEM;MAAS;IAC5B,CAAC,CAAC;IAEF,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpCZ,QAAQ,CAAC;MACPC,IAAI,EAAE,eAAe;MACrBU,OAAO,EAAEC,KAAK,CAACC;IACjB,CAAC,CAAC;IACF,MAAMD,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,MAAM,GAAGA,CAAA,KAAOd,QAAQ,IAAK;EACxCR,iBAAiB,CAAC,CAAC;EACnBQ,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAiB,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMc,SAAS,GAAGA,CAAA,KAAOf,QAAQ,IAAK;EAC3C,MAAMI,IAAI,GAAGb,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAE;EAC3C,IAAIa,IAAI,EAAE;IACRJ,QAAQ,CAAC;MACPC,IAAI,EAAE,eAAe;MACrBU,OAAO,EAAE;QAAEP;MAAK;IAClB,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}