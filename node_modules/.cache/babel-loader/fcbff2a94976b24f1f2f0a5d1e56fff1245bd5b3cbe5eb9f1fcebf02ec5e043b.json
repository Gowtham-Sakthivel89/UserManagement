{"ast":null,"code":"// src/store/actions/authActions.js\nconst mockUser = {\n  id: 1,\n  username: 'demo',\n  // Must be lowercase exactly\n  password: 'password123',\n  // Must match exactly\n  email: 'demo@example.com',\n  token: 'mock-auth-token-12345'\n};\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: 'LOGIN_REQUEST'\n  });\n  try {\n    // Add debug logging:\n    console.log('Attempting login with:', {\n      username,\n      password\n    });\n    console.log('Mock user data:', mockUser);\n    if (username === mockUser.username && password === mockUser.password) {\n      const {\n        password: _,\n        ...userData\n      } = mockUser; // Remove password\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: userData\n        }\n      });\n    } else {\n      throw new Error('Invalid credentials');\n    }\n  } catch (error) {\n    console.error('Login error:', error); // Additional logging\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["mockUser","id","username","password","email","token","login","dispatch","type","console","log","_","userData","payload","user","Error","error","message"],"sources":["D:/React project/usermanagement/src/store/actions/authActions.jsx"],"sourcesContent":["// src/store/actions/authActions.js\r\nconst mockUser = {\r\n    id: 1,\r\n    username: 'demo',          // Must be lowercase exactly\r\n    password: 'password123',   // Must match exactly\r\n    email: 'demo@example.com',\r\n    token: 'mock-auth-token-12345'\r\n  };\r\n  \r\n  export const login = (username, password) => async (dispatch) => {\r\n    dispatch({ type: 'LOGIN_REQUEST' });\r\n    \r\n    try {\r\n      // Add debug logging:\r\n      console.log('Attempting login with:', { username, password });\r\n      console.log('Mock user data:', mockUser);\r\n  \r\n      if (username === mockUser.username && password === mockUser.password) {\r\n        const { password: _, ...userData } = mockUser; // Remove password\r\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { user: userData } });\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error); // Additional logging\r\n      dispatch({ type: 'LOGIN_FAILURE', payload: error.message });\r\n      throw error;\r\n    }\r\n  };"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG;EACbC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,MAAM;EAAW;EAC3BC,QAAQ,EAAE,aAAa;EAAI;EAC3BC,KAAK,EAAE,kBAAkB;EACzBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACJ,QAAQ,EAAEC,QAAQ,KAAK,MAAOI,QAAQ,IAAK;EAC/DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,IAAI;IACF;IACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;MAAER,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAC7DM,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEV,QAAQ,CAAC;IAExC,IAAIE,QAAQ,KAAKF,QAAQ,CAACE,QAAQ,IAAIC,QAAQ,KAAKH,QAAQ,CAACG,QAAQ,EAAE;MACpE,MAAM;QAAEA,QAAQ,EAAEQ,CAAC;QAAE,GAAGC;MAAS,CAAC,GAAGZ,QAAQ,CAAC,CAAC;MAC/CO,QAAQ,CAAC;QAAEC,IAAI,EAAE,eAAe;QAAEK,OAAO,EAAE;UAAEC,IAAI,EAAEF;QAAS;MAAE,CAAC,CAAC;IAClE,CAAC,MAAM;MACL,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtCT,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEK,OAAO,EAAEG,KAAK,CAACC;IAAQ,CAAC,CAAC;IAC3D,MAAMD,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}