{"ast":null,"code":"import { saveToLocalStorage, clearLocalStorage } from '../../utils/storage';\n\n// Mock user data with exact credentials\nconst mockUsers = [{\n  id: 1,\n  username: 'demo',\n  // lowercase\n  password: 'password123',\n  // exact match\n  email: 'demo@example.com',\n  token: 'mock-auth-token-12345'\n}, {\n  id: 2,\n  username: 'admin',\n  password: 'admin123',\n  email: 'admin@example.com',\n  token: 'mock-auth-token-54321'\n}];\nexport const login = (username, password) => async dispatch => {\n  dispatch({\n    type: 'LOGIN_REQUEST'\n  });\n  try {\n    // Trim and clean inputs\n    const cleanUsername = username.toString().trim();\n    const cleanPassword = password.toString().trim();\n\n    // Debug logging\n    console.log('Login attempt with:', {\n      cleanUsername,\n      cleanPassword\n    });\n    console.log('Available users:', mockUsers);\n\n    // Find matching user (case sensitive for username)\n    const user = mockUsers.find(u => u.username === cleanUsername && u.password === cleanPassword);\n    if (user) {\n      const {\n        password: _,\n        ...userData\n      } = user; // Remove password\n      saveToLocalStorage('user', userData);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: userData\n        }\n      });\n    } else {\n      throw new Error('Invalid credentials. Use demo/password123 or admin/admin123');\n    }\n  } catch (error) {\n    console.error('Login error:', error.message);\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const logout = () => dispatch => {\n  clearLocalStorage();\n  dispatch({\n    type: 'LOGOUT_SUCCESS'\n  });\n};\nexport const checkAuth = () => dispatch => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user) {\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: {\n        user\n      }\n    });\n  }\n};","map":{"version":3,"names":["saveToLocalStorage","clearLocalStorage","mockUsers","id","username","password","email","token","login","dispatch","type","cleanUsername","toString","trim","cleanPassword","console","log","user","find","u","_","userData","payload","Error","error","message","logout","checkAuth","JSON","parse","localStorage","getItem"],"sources":["D:/React project/usermanagement/src/store/actions/authActions.jsx"],"sourcesContent":["import { saveToLocalStorage, clearLocalStorage } from '../../utils/storage';\r\n\r\n// Mock user data with exact credentials\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    username: 'demo',          // lowercase\r\n    password: 'password123',   // exact match\r\n    email: 'demo@example.com',\r\n    token: 'mock-auth-token-12345'\r\n  },\r\n  {\r\n    id: 2,\r\n    username: 'admin',\r\n    password: 'admin123',\r\n    email: 'admin@example.com',\r\n    token: 'mock-auth-token-54321'\r\n  }\r\n];\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n  dispatch({ type: 'LOGIN_REQUEST' });\r\n  \r\n  try {\r\n    // Trim and clean inputs\r\n    const cleanUsername = username.toString().trim();\r\n    const cleanPassword = password.toString().trim();\r\n\r\n    // Debug logging\r\n    console.log('Login attempt with:', { cleanUsername, cleanPassword });\r\n    console.log('Available users:', mockUsers);\r\n\r\n    // Find matching user (case sensitive for username)\r\n    const user = mockUsers.find(u => \r\n      u.username === cleanUsername && \r\n      u.password === cleanPassword\r\n    );\r\n\r\n    if (user) {\r\n      const { password: _, ...userData } = user; // Remove password\r\n      saveToLocalStorage('user', userData);\r\n      \r\n      dispatch({\r\n        type: 'LOGIN_SUCCESS',\r\n        payload: { user: userData }\r\n      });\r\n    } else {\r\n      throw new Error('Invalid credentials. Use demo/password123 or admin/admin123');\r\n    }\r\n  } catch (error) {\r\n    console.error('Login error:', error.message);\r\n    dispatch({\r\n      type: 'LOGIN_FAILURE',\r\n      payload: error.message\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  clearLocalStorage();\r\n  dispatch({ type: 'LOGOUT_SUCCESS' });\r\n};\r\n\r\nexport const checkAuth = () => (dispatch) => {\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n  if (user) {\r\n    dispatch({\r\n      type: 'LOGIN_SUCCESS',\r\n      payload: { user }\r\n    });\r\n  }\r\n};"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,iBAAiB,QAAQ,qBAAqB;;AAE3E;AACA,MAAMC,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,MAAM;EAAW;EAC3BC,QAAQ,EAAE,aAAa;EAAI;EAC3BC,KAAK,EAAE,kBAAkB;EACzBC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,OAAO;EACjBC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,mBAAmB;EAC1BC,KAAK,EAAE;AACT,CAAC,CACF;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACJ,QAAQ,EAAEC,QAAQ,KAAK,MAAOI,QAAQ,IAAK;EAC/DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,IAAI;IACF;IACA,MAAMC,aAAa,GAAGP,QAAQ,CAACQ,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAChD,MAAMC,aAAa,GAAGT,QAAQ,CAACO,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;;IAEhD;IACAE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;MAAEL,aAAa;MAAEG;IAAc,CAAC,CAAC;IACpEC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEd,SAAS,CAAC;;IAE1C;IACA,MAAMe,IAAI,GAAGf,SAAS,CAACgB,IAAI,CAACC,CAAC,IAC3BA,CAAC,CAACf,QAAQ,KAAKO,aAAa,IAC5BQ,CAAC,CAACd,QAAQ,KAAKS,aACjB,CAAC;IAED,IAAIG,IAAI,EAAE;MACR,MAAM;QAAEZ,QAAQ,EAAEe,CAAC;QAAE,GAAGC;MAAS,CAAC,GAAGJ,IAAI,CAAC,CAAC;MAC3CjB,kBAAkB,CAAC,MAAM,EAAEqB,QAAQ,CAAC;MAEpCZ,QAAQ,CAAC;QACPC,IAAI,EAAE,eAAe;QACrBY,OAAO,EAAE;UAAEL,IAAI,EAAEI;QAAS;MAC5B,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAM,IAAIE,KAAK,CAAC,6DAA6D,CAAC;IAChF;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC5ChB,QAAQ,CAAC;MACPC,IAAI,EAAE,eAAe;MACrBY,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;IACF,MAAMD,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,MAAM,GAAGA,CAAA,KAAOjB,QAAQ,IAAK;EACxCR,iBAAiB,CAAC,CAAC;EACnBQ,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAiB,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMiB,SAAS,GAAGA,CAAA,KAAOlB,QAAQ,IAAK;EAC3C,MAAMQ,IAAI,GAAGW,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EACrD,IAAId,IAAI,EAAE;IACRR,QAAQ,CAAC;MACPC,IAAI,EAAE,eAAe;MACrBY,OAAO,EAAE;QAAEL;MAAK;IAClB,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}